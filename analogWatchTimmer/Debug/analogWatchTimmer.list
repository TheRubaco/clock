
analogWatchTimmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002d54  08002d54  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d54  08002d54  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002d5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000014  08002d70  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002d70  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ecb  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000141f  00000000  00000000  00027f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  00029328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  00029c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000139b4  00000000  00000000  0002a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067d5  00000000  00000000  0003de64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ee90  00000000  00000000  00044639  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b34c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  000b3544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d18 	.word	0x08002d18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08002d18 	.word	0x08002d18

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <pulseTime>:
void setMode(PORTS *ports);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int pulseTime(){
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
	double time;
	if(!HAL_GPIO_ReadPin(buttonPin_GPIO_Port, buttonPin_Pin)){
 8000a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <pulseTime+0x98>)
 8000a08:	f001 f976 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d13b      	bne.n	8000a8a <pulseTime+0x8e>
		time=globalTime;
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <pulseTime+0x9c>)
 8000a14:	cb18      	ldmia	r3, {r3, r4}
 8000a16:	e9c7 3400 	strd	r3, r4, [r7]
		while(!HAL_GPIO_ReadPin(buttonPin_GPIO_Port, buttonPin_Pin)){
 8000a1a:	e002      	b.n	8000a22 <pulseTime+0x26>
			timeSet(60);
 8000a1c:	203c      	movs	r0, #60	; 0x3c
 8000a1e:	f000 f919 	bl	8000c54 <timeSet>
		while(!HAL_GPIO_ReadPin(buttonPin_GPIO_Port, buttonPin_Pin)){
 8000a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a26:	481b      	ldr	r0, [pc, #108]	; (8000a94 <pulseTime+0x98>)
 8000a28:	f001 f966 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f4      	beq.n	8000a1c <pulseTime+0x20>
		}
		if((globalTime-time)>5){
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <pulseTime+0x9c>)
 8000a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a3c:	f7ff fb8c 	bl	8000158 <__aeabi_dsub>
 8000a40:	4603      	mov	r3, r0
 8000a42:	460c      	mov	r4, r1
 8000a44:	4618      	mov	r0, r3
 8000a46:	4621      	mov	r1, r4
 8000a48:	f04f 0200 	mov.w	r2, #0
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <pulseTime+0xa0>)
 8000a4e:	f7ff ffcb 	bl	80009e8 <__aeabi_dcmpgt>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <pulseTime+0x60>
			return 5;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	e017      	b.n	8000a8c <pulseTime+0x90>
		}
		else if ((globalTime-time)<=1.5) {
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <pulseTime+0x9c>)
 8000a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a66:	f7ff fb77 	bl	8000158 <__aeabi_dsub>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460c      	mov	r4, r1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	4621      	mov	r1, r4
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <pulseTime+0xa4>)
 8000a78:	f7ff ffa2 	bl	80009c0 <__aeabi_dcmple>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <pulseTime+0x8a>
			return 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e002      	b.n	8000a8c <pulseTime+0x90>
		}
		return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <pulseTime+0x90>
	}
	else{
		return 0;
 8000a8a:	2300      	movs	r3, #0
	}
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	40140000 	.word	0x40140000
 8000aa0:	3ff80000 	.word	0x3ff80000

08000aa4 <setLeds>:

void setLeds(PORTS *PORTS){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	PORTS->ports[0]=ledPin_11_GPIO_Port;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a66      	ldr	r2, [pc, #408]	; (8000c48 <setLeds+0x1a4>)
 8000ab0:	601a      	str	r2, [r3, #0]
	PORTS->ports[1]=ledPin_10_GPIO_Port;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a65      	ldr	r2, [pc, #404]	; (8000c4c <setLeds+0x1a8>)
 8000ab6:	605a      	str	r2, [r3, #4]
	PORTS->ports[2]=ledPin_9_GPIO_Port;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a64      	ldr	r2, [pc, #400]	; (8000c4c <setLeds+0x1a8>)
 8000abc:	609a      	str	r2, [r3, #8]
	PORTS->ports[3]=ledPin_8_GPIO_Port;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a62      	ldr	r2, [pc, #392]	; (8000c4c <setLeds+0x1a8>)
 8000ac2:	60da      	str	r2, [r3, #12]
	PORTS->ports[4]=ledPin_7_GPIO_Port;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a61      	ldr	r2, [pc, #388]	; (8000c4c <setLeds+0x1a8>)
 8000ac8:	611a      	str	r2, [r3, #16]
	PORTS->ports[5]=ledPin_6_GPIO_Port;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a5f      	ldr	r2, [pc, #380]	; (8000c4c <setLeds+0x1a8>)
 8000ace:	615a      	str	r2, [r3, #20]
	PORTS->ports[6]=ledPin_5_GPIO_Port;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a5e      	ldr	r2, [pc, #376]	; (8000c4c <setLeds+0x1a8>)
 8000ad4:	619a      	str	r2, [r3, #24]
	PORTS->ports[7]=ledPin_4_GPIO_Port;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a5c      	ldr	r2, [pc, #368]	; (8000c4c <setLeds+0x1a8>)
 8000ada:	61da      	str	r2, [r3, #28]
	PORTS->ports[8]=ledPin_3_GPIO_Port;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a5b      	ldr	r2, [pc, #364]	; (8000c4c <setLeds+0x1a8>)
 8000ae0:	621a      	str	r2, [r3, #32]
	PORTS->ports[9]=ledPin_2_GPIO_Port;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a5a      	ldr	r2, [pc, #360]	; (8000c50 <setLeds+0x1ac>)
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
	PORTS->ports[10]=ledPin_1_GPIO_Port;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <setLeds+0x1ac>)
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
	PORTS->ports[11]=ledPin_12_GPIO_Port;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a55      	ldr	r2, [pc, #340]	; (8000c48 <setLeds+0x1a4>)
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
	PORTS->pos[0]=ledPin_11_Pin;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2201      	movs	r2, #1
 8000af8:	861a      	strh	r2, [r3, #48]	; 0x30
	PORTS->pos[1]=ledPin_10_Pin;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	865a      	strh	r2, [r3, #50]	; 0x32
	PORTS->pos[2]=ledPin_9_Pin;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2240      	movs	r2, #64	; 0x40
 8000b04:	869a      	strh	r2, [r3, #52]	; 0x34
	PORTS->pos[3]=ledPin_8_Pin;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2220      	movs	r2, #32
 8000b0a:	86da      	strh	r2, [r3, #54]	; 0x36
	PORTS->pos[4]=ledPin_7_Pin;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2210      	movs	r2, #16
 8000b10:	871a      	strh	r2, [r3, #56]	; 0x38
	PORTS->pos[5]=ledPin_6_Pin;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2208      	movs	r2, #8
 8000b16:	875a      	strh	r2, [r3, #58]	; 0x3a
	PORTS->pos[6]=ledPin_5_Pin;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
	PORTS->pos[7]=ledPin_4_Pin;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2202      	movs	r2, #2
 8000b22:	87da      	strh	r2, [r3, #62]	; 0x3e
	PORTS->pos[8]=ledPin_3_Pin;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	PORTS->pos[9]=ledPin_2_Pin;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b32:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	PORTS->pos[10]=ledPin_1_Pin;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	PORTS->pos[11]=ledPin_12_Pin;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2202      	movs	r2, #2
 8000b44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	for (int i = 0; i < 12; ++i) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e022      	b.n	8000b94 <setLeds+0xf0>
		HAL_GPIO_WritePin(PORTS->ports[i], PORTS->pos[i], GPIO_PIN_SET);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	3218      	adds	r2, #24
 8000b5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b60:	2201      	movs	r2, #1
 8000b62:	4619      	mov	r1, r3
 8000b64:	f001 f8df 	bl	8001d26 <HAL_GPIO_WritePin>
		timeSet(20);
 8000b68:	2014      	movs	r0, #20
 8000b6a:	f000 f873 	bl	8000c54 <timeSet>
		HAL_GPIO_WritePin(PORTS->ports[i], PORTS->pos[i], GPIO_PIN_RESET);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	3218      	adds	r2, #24
 8000b7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	f001 f8cf 	bl	8001d26 <HAL_GPIO_WritePin>
		timeSet(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f863 	bl	8000c54 <timeSet>
	for (int i = 0; i < 12; ++i) {
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2b0b      	cmp	r3, #11
 8000b98:	ddd9      	ble.n	8000b4e <setLeds+0xaa>
	}
	for (int i = 0; i < 12; ++i) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	e022      	b.n	8000be6 <setLeds+0x142>
		HAL_GPIO_WritePin(PORTS->ports[i], PORTS->pos[i], GPIO_PIN_SET);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	3218      	adds	r2, #24
 8000bae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f001 f8b6 	bl	8001d26 <HAL_GPIO_WritePin>
		timeSet(20);
 8000bba:	2014      	movs	r0, #20
 8000bbc:	f000 f84a 	bl	8000c54 <timeSet>
		HAL_GPIO_WritePin(PORTS->ports[i], PORTS->pos[i], GPIO_PIN_RESET);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	3218      	adds	r2, #24
 8000bce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f001 f8a6 	bl	8001d26 <HAL_GPIO_WritePin>
		timeSet(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 f83a 	bl	8000c54 <timeSet>
	for (int i = 0; i < 12; ++i) {
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	3301      	adds	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2b0b      	cmp	r3, #11
 8000bea:	ddd9      	ble.n	8000ba0 <setLeds+0xfc>
	}
	for (int i = 11	; i >= 0; i--) {
 8000bec:	230b      	movs	r3, #11
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	e022      	b.n	8000c38 <setLeds+0x194>
		HAL_GPIO_WritePin(PORTS->ports[i], PORTS->pos[i], GPIO_PIN_SET);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	3218      	adds	r2, #24
 8000c00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	f001 f88d 	bl	8001d26 <HAL_GPIO_WritePin>
		timeSet(20);
 8000c0c:	2014      	movs	r0, #20
 8000c0e:	f000 f821 	bl	8000c54 <timeSet>
		HAL_GPIO_WritePin(PORTS->ports[i], PORTS->pos[i], GPIO_PIN_RESET);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	3218      	adds	r2, #24
 8000c20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	f001 f87d 	bl	8001d26 <HAL_GPIO_WritePin>
		timeSet(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 f811 	bl	8000c54 <timeSet>
	for (int i = 11	; i >= 0; i--) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dad9      	bge.n	8000bf2 <setLeds+0x14e>
	}
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40011000 	.word	0x40011000

08000c54 <timeSet>:

void timeSet(int number){
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	for(service=0;service<=number;){
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <timeSet+0x28>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
 8000c62:	bf00      	nop
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <timeSet+0x28>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	daf8      	bge.n	8000c64 <timeSet+0x10>
	}
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000032 	.word	0x20000032

08000c80 <runMode>:

void runMode(PORTS *ports){
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	double minutes,integer;
	minutes=modf((globalTime/3600),&integer);
 8000c88:	4b75      	ldr	r3, [pc, #468]	; (8000e60 <runMode+0x1e0>)
 8000c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c8e:	a372      	add	r3, pc, #456	; (adr r3, 8000e58 <runMode+0x1d8>)
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c94:	f7ff fd42 	bl	800071c <__aeabi_ddiv>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f001 ffed 	bl	8002c84 <modf>
 8000caa:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  for (j = 0; j < 5; ++j) {
 8000cae:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <runMode+0x1e4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e063      	b.n	8000d7e <runMode+0xfe>
		  //Se imprimen los LEDS intermitentemente 5 veces.
		  for (i = 0; i <= 11; ++i) {
 8000cb6:	4b6c      	ldr	r3, [pc, #432]	; (8000e68 <runMode+0x1e8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e032      	b.n	8000d24 <runMode+0xa4>
			  if((globalTime/(3600*(i+1)))>(1)){
 8000cbe:	4b68      	ldr	r3, [pc, #416]	; (8000e60 <runMode+0x1e0>)
 8000cc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000cc4:	4b68      	ldr	r3, [pc, #416]	; (8000e68 <runMode+0x1e8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fb8e 	bl	80003f4 <__aeabi_i2d>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	f7ff fd1c 	bl	800071c <__aeabi_ddiv>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	4621      	mov	r1, r4
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <runMode+0x1ec>)
 8000cf2:	f7ff fe79 	bl	80009e8 <__aeabi_dcmpgt>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00e      	beq.n	8000d1a <runMode+0x9a>
				  HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_SET);
 8000cfc:	4b5a      	ldr	r3, [pc, #360]	; (8000e68 <runMode+0x1e8>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d06:	4b58      	ldr	r3, [pc, #352]	; (8000e68 <runMode+0x1e8>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3218      	adds	r2, #24
 8000d0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	f001 f806 	bl	8001d26 <HAL_GPIO_WritePin>
		  for (i = 0; i <= 11; ++i) {
 8000d1a:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <runMode+0x1e8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a51      	ldr	r2, [pc, #324]	; (8000e68 <runMode+0x1e8>)
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <runMode+0x1e8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b0b      	cmp	r3, #11
 8000d2a:	ddc8      	ble.n	8000cbe <runMode+0x3e>
				  //HAL_Delay(500);
			  }
			  //HAL_GPIO_WritePin(ports.ports[i], ports.pos[i], GPIO_PIN_RESET);
		  }
		  timeSet(300);
 8000d2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d30:	f7ff ff90 	bl	8000c54 <timeSet>
		  for (i = 0; i <= 11; ++i) {
 8000d34:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <runMode+0x1e8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e013      	b.n	8000d64 <runMode+0xe4>
			  HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_RESET);
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <runMode+0x1e8>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d46:	4b48      	ldr	r3, [pc, #288]	; (8000e68 <runMode+0x1e8>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3218      	adds	r2, #24
 8000d4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	f000 ffe6 	bl	8001d26 <HAL_GPIO_WritePin>
		  for (i = 0; i <= 11; ++i) {
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <runMode+0x1e8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a41      	ldr	r2, [pc, #260]	; (8000e68 <runMode+0x1e8>)
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <runMode+0x1e8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b0b      	cmp	r3, #11
 8000d6a:	dde7      	ble.n	8000d3c <runMode+0xbc>
		  }
		  timeSet(300);
 8000d6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d70:	f7ff ff70 	bl	8000c54 <timeSet>
	  for (j = 0; j < 5; ++j) {
 8000d74:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <runMode+0x1e4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	; (8000e64 <runMode+0x1e4>)
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <runMode+0x1e4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	dd97      	ble.n	8000cb6 <runMode+0x36>
	  }
	  //Se encienden los LEDS en tiempo de minutos.
	  for (i = 0; i <= 11; ++i) {
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <runMode+0x1e8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e039      	b.n	8000e02 <runMode+0x182>
		  if (((minutes*60)/(5*(i+1)))>1) {
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <runMode+0x1f0>)
 8000d94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d98:	f7ff fb96 	bl	80004c8 <__aeabi_dmul>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	460c      	mov	r4, r1
 8000da0:	4625      	mov	r5, r4
 8000da2:	461c      	mov	r4, r3
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <runMode+0x1e8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fb1f 	bl	80003f4 <__aeabi_i2d>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4620      	mov	r0, r4
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	f7ff fcad 	bl	800071c <__aeabi_ddiv>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	4621      	mov	r1, r4
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <runMode+0x1ec>)
 8000dd0:	f7ff fe0a 	bl	80009e8 <__aeabi_dcmpgt>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00e      	beq.n	8000df8 <runMode+0x178>
			  HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_SET);
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <runMode+0x1e8>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <runMode+0x1e8>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3218      	adds	r2, #24
 8000dec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	f000 ff97 	bl	8001d26 <HAL_GPIO_WritePin>
	  for (i = 0; i <= 11; ++i) {
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <runMode+0x1e8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <runMode+0x1e8>)
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <runMode+0x1e8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b0b      	cmp	r3, #11
 8000e08:	ddc1      	ble.n	8000d8e <runMode+0x10e>
		  }
	 }
	  timeSet(1500);
 8000e0a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e0e:	f7ff ff21 	bl	8000c54 <timeSet>
	  for (i = 0; i <= 11; ++i) {
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <runMode+0x1e8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e013      	b.n	8000e42 <runMode+0x1c2>
		  HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_RESET);
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <runMode+0x1e8>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <runMode+0x1e8>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3218      	adds	r2, #24
 8000e2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e30:	2200      	movs	r2, #0
 8000e32:	4619      	mov	r1, r3
 8000e34:	f000 ff77 	bl	8001d26 <HAL_GPIO_WritePin>
	  for (i = 0; i <= 11; ++i) {
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <runMode+0x1e8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <runMode+0x1e8>)
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <runMode+0x1e8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b0b      	cmp	r3, #11
 8000e48:	dde7      	ble.n	8000e1a <runMode+0x19a>
	  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bdb0      	pop	{r4, r5, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	f3af 8000 	nop.w
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	40ac2000 	.word	0x40ac2000
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000034 	.word	0x20000034
 8000e68:	20000038 	.word	0x20000038
 8000e6c:	3ff00000 	.word	0x3ff00000
 8000e70:	404e0000 	.word	0x404e0000
 8000e74:	00000000 	.word	0x00000000

08000e78 <setMode>:

void setMode(PORTS *ports){
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b08b      	sub	sp, #44	; 0x2c
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e86:	48b8      	ldr	r0, [pc, #736]	; (8001168 <setMode+0x2f0>)
 8000e88:	f000 ff4d 	bl	8001d26 <HAL_GPIO_WritePin>
	timeSet(300);
 8000e8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e90:	f7ff fee0 	bl	8000c54 <timeSet>
	HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9a:	48b3      	ldr	r0, [pc, #716]	; (8001168 <setMode+0x2f0>)
 8000e9c:	f000 ff43 	bl	8001d26 <HAL_GPIO_WritePin>
	timeSet(300);
 8000ea0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ea4:	f7ff fed6 	bl	8000c54 <timeSet>
	HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eae:	48ae      	ldr	r0, [pc, #696]	; (8001168 <setMode+0x2f0>)
 8000eb0:	f000 ff39 	bl	8001d26 <HAL_GPIO_WritePin>
	timeSet(300);
 8000eb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eb8:	f7ff fecc 	bl	8000c54 <timeSet>
	HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec2:	48a9      	ldr	r0, [pc, #676]	; (8001168 <setMode+0x2f0>)
 8000ec4:	f000 ff2f 	bl	8001d26 <HAL_GPIO_WritePin>
	//getOut de tipo int es la salida al modo SET.
	int menu;
	int getOut=1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
	double init=300;
 8000ecc:	a4a0      	add	r4, pc, #640	; (adr r4, 8001150 <setMode+0x2d8>)
 8000ece:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ed2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double minutes=3600;
 8000ed6:	a4a0      	add	r4, pc, #640	; (adr r4, 8001158 <setMode+0x2e0>)
 8000ed8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000edc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	while(getOut){
 8000ee0:	e178      	b.n	80011d4 <setMode+0x35c>
		menu=pulseTime();
 8000ee2:	f7ff fd8b 	bl	80009fc <pulseTime>
 8000ee6:	60f8      	str	r0, [r7, #12]
		for (i = 0; i <= 11; ++i) {
 8000ee8:	4ba0      	ldr	r3, [pc, #640]	; (800116c <setMode+0x2f4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e031      	b.n	8000f54 <setMode+0xdc>
			if((minutes/(3600*(i+1)))>=(1)){
 8000ef0:	4b9e      	ldr	r3, [pc, #632]	; (800116c <setMode+0x2f4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa78 	bl	80003f4 <__aeabi_i2d>
 8000f04:	4603      	mov	r3, r0
 8000f06:	460c      	mov	r4, r1
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f10:	f7ff fc04 	bl	800071c <__aeabi_ddiv>
 8000f14:	4603      	mov	r3, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b93      	ldr	r3, [pc, #588]	; (8001170 <setMode+0x2f8>)
 8000f22:	f7ff fd57 	bl	80009d4 <__aeabi_dcmpge>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00e      	beq.n	8000f4a <setMode+0xd2>
				HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_SET);
 8000f2c:	4b8f      	ldr	r3, [pc, #572]	; (800116c <setMode+0x2f4>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000f36:	4b8d      	ldr	r3, [pc, #564]	; (800116c <setMode+0x2f4>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3218      	adds	r2, #24
 8000f3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	f000 feee 	bl	8001d26 <HAL_GPIO_WritePin>
		for (i = 0; i <= 11; ++i) {
 8000f4a:	4b88      	ldr	r3, [pc, #544]	; (800116c <setMode+0x2f4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a86      	ldr	r2, [pc, #536]	; (800116c <setMode+0x2f4>)
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b85      	ldr	r3, [pc, #532]	; (800116c <setMode+0x2f4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b0b      	cmp	r3, #11
 8000f5a:	ddc9      	ble.n	8000ef0 <setMode+0x78>
			}
		}
		if(menu==1){
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d137      	bne.n	8000fd2 <setMode+0x15a>
			minutes+=3600;
 8000f62:	a37d      	add	r3, pc, #500	; (adr r3, 8001158 <setMode+0x2e0>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f6c:	f7ff f8f6 	bl	800015c <__adddf3>
 8000f70:	4603      	mov	r3, r0
 8000f72:	460c      	mov	r4, r1
 8000f74:	e9c7 3404 	strd	r3, r4, [r7, #16]
			if(minutes>43200){
 8000f78:	a379      	add	r3, pc, #484	; (adr r3, 8001160 <setMode+0x2e8>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f82:	f7ff fd31 	bl	80009e8 <__aeabi_dcmpgt>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d100      	bne.n	8000f8e <setMode+0x116>
 8000f8c:	e122      	b.n	80011d4 <setMode+0x35c>
				minutes=3600;
 8000f8e:	a472      	add	r4, pc, #456	; (adr r4, 8001158 <setMode+0x2e0>)
 8000f90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f94:	e9c7 3404 	strd	r3, r4, [r7, #16]
				for (i = 0; i <= 11; ++i) {
 8000f98:	4b74      	ldr	r3, [pc, #464]	; (800116c <setMode+0x2f4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e013      	b.n	8000fc8 <setMode+0x150>
					HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_RESET);
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <setMode+0x2f4>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000faa:	4b70      	ldr	r3, [pc, #448]	; (800116c <setMode+0x2f4>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3218      	adds	r2, #24
 8000fb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f000 feb4 	bl	8001d26 <HAL_GPIO_WritePin>
				for (i = 0; i <= 11; ++i) {
 8000fbe:	4b6b      	ldr	r3, [pc, #428]	; (800116c <setMode+0x2f4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a69      	ldr	r2, [pc, #420]	; (800116c <setMode+0x2f4>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b68      	ldr	r3, [pc, #416]	; (800116c <setMode+0x2f4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b0b      	cmp	r3, #11
 8000fce:	dde7      	ble.n	8000fa0 <setMode+0x128>
 8000fd0:	e100      	b.n	80011d4 <setMode+0x35c>
				}
			}
		}
		else if(menu==5) {
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	f040 80fd 	bne.w	80011d4 <setMode+0x35c>
			globalTime=minutes;
 8000fda:	4a66      	ldr	r2, [pc, #408]	; (8001174 <setMode+0x2fc>)
 8000fdc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000fe0:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fea:	485f      	ldr	r0, [pc, #380]	; (8001168 <setMode+0x2f0>)
 8000fec:	f000 fe9b 	bl	8001d26 <HAL_GPIO_WritePin>
			timeSet(300);
 8000ff0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ff4:	f7ff fe2e 	bl	8000c54 <timeSet>
			HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffe:	485a      	ldr	r0, [pc, #360]	; (8001168 <setMode+0x2f0>)
 8001000:	f000 fe91 	bl	8001d26 <HAL_GPIO_WritePin>
			timeSet(300);
 8001004:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001008:	f7ff fe24 	bl	8000c54 <timeSet>
			HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001012:	4855      	ldr	r0, [pc, #340]	; (8001168 <setMode+0x2f0>)
 8001014:	f000 fe87 	bl	8001d26 <HAL_GPIO_WritePin>
			timeSet(300);
 8001018:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800101c:	f7ff fe1a 	bl	8000c54 <timeSet>
			HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001026:	4850      	ldr	r0, [pc, #320]	; (8001168 <setMode+0x2f0>)
 8001028:	f000 fe7d 	bl	8001d26 <HAL_GPIO_WritePin>
			timeSet(300);
 800102c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001030:	f7ff fe10 	bl	8000c54 <timeSet>
			HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	484b      	ldr	r0, [pc, #300]	; (8001168 <setMode+0x2f0>)
 800103c:	f000 fe73 	bl	8001d26 <HAL_GPIO_WritePin>
			timeSet(300);
 8001040:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001044:	f7ff fe06 	bl	8000c54 <timeSet>
			HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104e:	4846      	ldr	r0, [pc, #280]	; (8001168 <setMode+0x2f0>)
 8001050:	f000 fe69 	bl	8001d26 <HAL_GPIO_WritePin>
			for (i = 0; i <= 11; ++i) {
 8001054:	4b45      	ldr	r3, [pc, #276]	; (800116c <setMode+0x2f4>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e013      	b.n	8001084 <setMode+0x20c>
				HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_RESET);
 800105c:	4b43      	ldr	r3, [pc, #268]	; (800116c <setMode+0x2f4>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <setMode+0x2f4>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3218      	adds	r2, #24
 800106e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f000 fe56 	bl	8001d26 <HAL_GPIO_WritePin>
			for (i = 0; i <= 11; ++i) {
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <setMode+0x2f4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a3a      	ldr	r2, [pc, #232]	; (800116c <setMode+0x2f4>)
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <setMode+0x2f4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b0b      	cmp	r3, #11
 800108a:	dde7      	ble.n	800105c <setMode+0x1e4>
			}
			while(getOut){
 800108c:	e09e      	b.n	80011cc <setMode+0x354>
				for (i = 0; i <= 11; ++i) {
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <setMode+0x2f4>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e031      	b.n	80010fa <setMode+0x282>
					if (((init)/(300*(i+1)))>=1) {
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <setMode+0x2f4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010a0:	fb02 f303 	mul.w	r3, r2, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9a5 	bl	80003f4 <__aeabi_i2d>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	461a      	mov	r2, r3
 80010b0:	4623      	mov	r3, r4
 80010b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010b6:	f7ff fb31 	bl	800071c <__aeabi_ddiv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	4618      	mov	r0, r3
 80010c0:	4621      	mov	r1, r4
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <setMode+0x2f8>)
 80010c8:	f7ff fc84 	bl	80009d4 <__aeabi_dcmpge>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00e      	beq.n	80010f0 <setMode+0x278>
						HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_SET);
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <setMode+0x2f4>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <setMode+0x2f4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3218      	adds	r2, #24
 80010e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	f000 fe1b 	bl	8001d26 <HAL_GPIO_WritePin>
				for (i = 0; i <= 11; ++i) {
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <setMode+0x2f4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <setMode+0x2f4>)
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <setMode+0x2f4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b0b      	cmp	r3, #11
 8001100:	ddc9      	ble.n	8001096 <setMode+0x21e>
					}
				}
				menu=pulseTime();
 8001102:	f7ff fc7b 	bl	80009fc <pulseTime>
 8001106:	60f8      	str	r0, [r7, #12]
				if(menu==1){
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d14d      	bne.n	80011aa <setMode+0x332>
					init+=300;
 800110e:	a310      	add	r3, pc, #64	; (adr r3, 8001150 <setMode+0x2d8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001118:	f7ff f820 	bl	800015c <__adddf3>
 800111c:	4603      	mov	r3, r0
 800111e:	460c      	mov	r4, r1
 8001120:	e9c7 3406 	strd	r3, r4, [r7, #24]
					if(init>3600){
 8001124:	a30c      	add	r3, pc, #48	; (adr r3, 8001158 <setMode+0x2e0>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800112e:	f7ff fc5b 	bl	80009e8 <__aeabi_dcmpgt>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d100      	bne.n	800113a <setMode+0x2c2>
 8001138:	e048      	b.n	80011cc <setMode+0x354>
						init=300;
 800113a:	a405      	add	r4, pc, #20	; (adr r4, 8001150 <setMode+0x2d8>)
 800113c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001140:	e9c7 3406 	strd	r3, r4, [r7, #24]
						for (i = 0; i <= 11; ++i) {
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <setMode+0x2f4>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e029      	b.n	80011a0 <setMode+0x328>
 800114c:	f3af 8000 	nop.w
 8001150:	00000000 	.word	0x00000000
 8001154:	4072c000 	.word	0x4072c000
 8001158:	00000000 	.word	0x00000000
 800115c:	40ac2000 	.word	0x40ac2000
 8001160:	00000000 	.word	0x00000000
 8001164:	40e51800 	.word	0x40e51800
 8001168:	40010c00 	.word	0x40010c00
 800116c:	20000038 	.word	0x20000038
 8001170:	3ff00000 	.word	0x3ff00000
 8001174:	20000000 	.word	0x20000000
							HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_RESET);
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <setMode+0x3c4>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <setMode+0x3c4>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3218      	adds	r2, #24
 800118a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	f000 fdc8 	bl	8001d26 <HAL_GPIO_WritePin>
						for (i = 0; i <= 11; ++i) {
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <setMode+0x3c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a27      	ldr	r2, [pc, #156]	; (800123c <setMode+0x3c4>)
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <setMode+0x3c4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b0b      	cmp	r3, #11
 80011a6:	dde7      	ble.n	8001178 <setMode+0x300>
 80011a8:	e010      	b.n	80011cc <setMode+0x354>
						}
					}
				}
				else if(menu==5){
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d10d      	bne.n	80011cc <setMode+0x354>
					getOut=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
					globalTime+=init;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <setMode+0x3c8>)
 80011b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011be:	f7fe ffcd 	bl	800015c <__adddf3>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <setMode+0x3c8>)
 80011c8:	e9c2 3400 	strd	r3, r4, [r2]
			while(getOut){
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f47f af5d 	bne.w	800108e <setMode+0x216>
	while(getOut){
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f ae83 	bne.w	8000ee2 <setMode+0x6a>
				}
			}
		}
	}
	for (i = 0; i <= 11; ++i) {
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <setMode+0x3c4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e013      	b.n	800120c <setMode+0x394>
		HAL_GPIO_WritePin(ports->ports[i], ports->pos[i], GPIO_PIN_RESET);
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <setMode+0x3c4>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <setMode+0x3c4>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3218      	adds	r2, #24
 80011f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	f000 fd92 	bl	8001d26 <HAL_GPIO_WritePin>
	for (i = 0; i <= 11; ++i) {
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <setMode+0x3c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <setMode+0x3c4>)
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <setMode+0x3c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b0b      	cmp	r3, #11
 8001212:	dde7      	ble.n	80011e4 <setMode+0x36c>
	}
	HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <setMode+0x3cc>)
 800121c:	f000 fd83 	bl	8001d26 <HAL_GPIO_WritePin>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	timeSet(2000);
 8001220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001224:	f7ff fd16 	bl	8000c54 <timeSet>
	HAL_GPIO_WritePin(buzzerPin_GPIO_Port, buzzerPin_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <setMode+0x3cc>)
 8001230:	f000 fd79 	bl	8001d26 <HAL_GPIO_WritePin>
}
 8001234:	bf00      	nop
 8001236:	372c      	adds	r7, #44	; 0x2c
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	20000038 	.word	0x20000038
 8001240:	20000000 	.word	0x20000000
 8001244:	40010c00 	.word	0x40010c00

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b092      	sub	sp, #72	; 0x48
 800124c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fa89 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f821 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 f8b1 	bl	80013bc <MX_GPIO_Init>
  MX_TIM2_Init();
 800125a:	f000 f863 	bl	8001324 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <main+0x4c>)
 8001260:	f001 f98f 	bl	8002582 <HAL_TIM_Base_Start_IT>
  setLeds(&ports);
 8001264:	463b      	mov	r3, r7
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fc1c 	bl	8000aa4 <setLeds>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch ((int)pulseTime()) {
 800126c:	f7ff fbc6 	bl	80009fc <pulseTime>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d002      	beq.n	800127c <main+0x34>
 8001276:	2b05      	cmp	r3, #5
 8001278:	d005      	beq.n	8001286 <main+0x3e>
		case 5:{
			setMode(&ports);
			break;
		}
		default:{
			break;
 800127a:	e009      	b.n	8001290 <main+0x48>
			runMode(&ports);
 800127c:	463b      	mov	r3, r7
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fcfe 	bl	8000c80 <runMode>
			break;
 8001284:	e004      	b.n	8001290 <main+0x48>
			setMode(&ports);
 8001286:	463b      	mov	r3, r7
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fdf5 	bl	8000e78 <setMode>
			break;
 800128e:	bf00      	nop
	  switch ((int)pulseTime()) {
 8001290:	e7ec      	b.n	800126c <main+0x24>
 8001292:	bf00      	nop
 8001294:	2000003c 	.word	0x2000003c

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b090      	sub	sp, #64	; 0x40
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	2228      	movs	r2, #40	; 0x28
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fce4 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012cc:	2302      	movs	r3, #2
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fd39 	bl	8001d58 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012ec:	f000 f950 	bl	8001590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f4:	2302      	movs	r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f000 ffa4 	bl	8002258 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001316:	f000 f93b 	bl	8001590 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3740      	adds	r7, #64	; 0x40
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM2_Init+0x94>)
 800134a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800134e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001358:	2201      	movs	r2, #1
 800135a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_TIM2_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_TIM2_Init+0x94>)
 800136a:	f001 f8df 	bl	800252c <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 f90c 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001386:	f001 fa27 	bl	80027d8 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 f8fe 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM2_Init+0x94>)
 80013a2:	f001 fbed 	bl	8002b80 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f8f0 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000003c 	.word	0x2000003c

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <MX_GPIO_Init+0x110>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <MX_GPIO_Init+0x110>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <MX_GPIO_Init+0x110>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_GPIO_Init+0x110>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a37      	ldr	r2, [pc, #220]	; (80014cc <MX_GPIO_Init+0x110>)
 80013ee:	f043 0320 	orr.w	r3, r3, #32
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_GPIO_Init+0x110>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <MX_GPIO_Init+0x110>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <MX_GPIO_Init+0x110>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <MX_GPIO_Init+0x110>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <MX_GPIO_Init+0x110>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <MX_GPIO_Init+0x110>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_GPIO_Init+0x110>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ledPin_1_Pin|ledPin_2_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001436:	4826      	ldr	r0, [pc, #152]	; (80014d0 <MX_GPIO_Init+0x114>)
 8001438:	f000 fc75 	bl	8001d26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ledPin_3_Pin|ledPin_4_Pin|ledPin_5_Pin|ledPin_6_Pin 
 800143c:	2200      	movs	r2, #0
 800143e:	21ff      	movs	r1, #255	; 0xff
 8001440:	4824      	ldr	r0, [pc, #144]	; (80014d4 <MX_GPIO_Init+0x118>)
 8001442:	f000 fc70 	bl	8001d26 <HAL_GPIO_WritePin>
                          |ledPin_7_Pin|ledPin_8_Pin|ledPin_9_Pin|ledPin_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledPin_11_Pin|ledPin_12_Pin|buzzerPin_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f640 0103 	movw	r1, #2051	; 0x803
 800144c:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_GPIO_Init+0x11c>)
 800144e:	f000 fc6a 	bl	8001d26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ledPin_1_Pin ledPin_2_Pin */
  GPIO_InitStruct.Pin = ledPin_1_Pin|ledPin_2_Pin;
 8001452:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4819      	ldr	r0, [pc, #100]	; (80014d0 <MX_GPIO_Init+0x114>)
 800146c:	f000 faea 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledPin_3_Pin ledPin_4_Pin ledPin_5_Pin ledPin_6_Pin 
                           ledPin_7_Pin ledPin_8_Pin ledPin_9_Pin ledPin_10_Pin */
  GPIO_InitStruct.Pin = ledPin_3_Pin|ledPin_4_Pin|ledPin_5_Pin|ledPin_6_Pin 
 8001470:	23ff      	movs	r3, #255	; 0xff
 8001472:	613b      	str	r3, [r7, #16]
                          |ledPin_7_Pin|ledPin_8_Pin|ledPin_9_Pin|ledPin_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2302      	movs	r3, #2
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_GPIO_Init+0x118>)
 8001488:	f000 fadc 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledPin_11_Pin ledPin_12_Pin buzzerPin_Pin */
  GPIO_InitStruct.Pin = ledPin_11_Pin|ledPin_12_Pin|buzzerPin_Pin;
 800148c:	f640 0303 	movw	r3, #2051	; 0x803
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_GPIO_Init+0x11c>)
 80014a6:	f000 facd 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPin_Pin */
  GPIO_InitStruct.Pin = buttonPin_Pin;
 80014aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPin_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_GPIO_Init+0x11c>)
 80014c0:	f000 fac0 	bl	8001a44 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40010800 	.word	0x40010800
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	00000000 	.word	0x00000000

080014e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);
  if (htim->Instance == TIM2) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d13b      	bne.n	800156a <HAL_TIM_PeriodElapsedCallback+0x8a>
	if(service++ == 65535) service = 0;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	b291      	uxth	r1, r2
 80014fc:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80014fe:	8011      	strh	r1, [r2, #0]
 8001500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001504:	4293      	cmp	r3, r2
 8001506:	d102      	bne.n	800150e <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
	if(counter++ == 1000){
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	b291      	uxth	r1, r2
 8001518:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800151a:	8011      	strh	r1, [r2, #0]
 800151c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001520:	d123      	bne.n	800156a <HAL_TIM_PeriodElapsedCallback+0x8a>
		counter = 0;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001524:	2200      	movs	r2, #0
 8001526:	801a      	strh	r2, [r3, #0]
		if (globalTime++ == 43200) {
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800152a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fe10 	bl	800015c <__adddf3>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4911      	ldr	r1, [pc, #68]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001542:	e9c1 2300 	strd	r2, r3, [r1]
 8001546:	a30c      	add	r3, pc, #48	; (adr r3, 8001578 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	4620      	mov	r0, r4
 800154e:	4629      	mov	r1, r5
 8001550:	f7ff fa22 	bl	8000998 <__aeabi_dcmpeq>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d100      	bne.n	800155c <HAL_TIM_PeriodElapsedCallback+0x7c>
	}
  }
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800155a:	e006      	b.n	800156a <HAL_TIM_PeriodElapsedCallback+0x8a>
			globalTime = 0;
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	f04f 0400 	mov.w	r4, #0
 8001566:	e9c2 3400 	strd	r3, r4, [r2]
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	00000000 	.word	0x00000000
 800157c:	40e51800 	.word	0x40e51800
 8001580:	20000032 	.word	0x20000032
 8001584:	20000030 	.word	0x20000030
 8001588:	20000000 	.word	0x20000000
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_MspInit+0x5c>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <HAL_MspInit+0x5c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_MspInit+0x5c>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x5c>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x5c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x5c>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_MspInit+0x60>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_MspInit+0x60>)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010000 	.word	0x40010000

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d113      	bne.n	800163a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201c      	movs	r0, #28
 8001630:	f000 f9d1 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001634:	201c      	movs	r0, #28
 8001636:	f000 f9ea 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <HardFault_Handler+0x4>

0800165a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <MemManage_Handler+0x4>

08001660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <BusFault_Handler+0x4>

08001666 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <UsageFault_Handler+0x4>

0800166c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 f8ac 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <TIM2_IRQHandler+0x10>)
 80016a2:	f000 ff91 	bl	80025c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000003c 	.word	0x2000003c

080016b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <SystemInit+0x5c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <SystemInit+0x5c>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <SystemInit+0x5c>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4911      	ldr	r1, [pc, #68]	; (800170c <SystemInit+0x5c>)
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <SystemInit+0x60>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <SystemInit+0x5c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <SystemInit+0x5c>)
 80016d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <SystemInit+0x5c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SystemInit+0x5c>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <SystemInit+0x5c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <SystemInit+0x5c>)
 80016ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SystemInit+0x5c>)
 80016f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SystemInit+0x64>)
 80016fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001702:	609a      	str	r2, [r3, #8]
#endif 
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	f8ff0000 	.word	0xf8ff0000
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001718:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800171a:	e003      	b.n	8001724 <LoopCopyDataInit>

0800171c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800171e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001720:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001722:	3104      	adds	r1, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001724:	480a      	ldr	r0, [pc, #40]	; (8001750 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001728:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800172a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800172c:	d3f6      	bcc.n	800171c <CopyDataInit>
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001730:	e002      	b.n	8001738 <LoopFillZerobss>

08001732 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001734:	f842 3b04 	str.w	r3, [r2], #4

08001738 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800173a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800173c:	d3f9      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800173e:	f7ff ffb7 	bl	80016b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f001 fa73 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001746:	f7ff fd7f 	bl	8001248 <main>
  bx lr
 800174a:	4770      	bx	lr
  ldr r3, =_sidata
 800174c:	08002d5c 	.word	0x08002d5c
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001754:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001758:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800175c:	20000080 	.word	0x20000080

08001760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x28>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x28>)
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f923 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff ff0c 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f93b 	bl	8001a2a <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f903 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000010 	.word	0x20000010
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x1c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x20>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_IncTick+0x20>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000010 	.word	0x20000010
 8001810:	2000007c 	.word	0x2000007c

08001814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	2000007c 	.word	0x2000007c

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4906      	ldr	r1, [pc, #24]	; (80018c0 <__NVIC_EnableIRQ+0x34>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff90 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff2d 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff42 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff90 	bl	8001918 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5f 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b08b      	sub	sp, #44	; 0x2c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e127      	b.n	8001ca8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8116 	bne.w	8001ca2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d034      	beq.n	8001ae8 <HAL_GPIO_Init+0xa4>
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d80d      	bhi.n	8001a9e <HAL_GPIO_Init+0x5a>
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x9a>
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d804      	bhi.n	8001a94 <HAL_GPIO_Init+0x50>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d031      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d01c      	beq.n	8001acc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e048      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d043      	beq.n	8001b20 <HAL_GPIO_Init+0xdc>
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_GPIO_Init+0x90>
          break;
 8001a9c:	e043      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a9e:	4a89      	ldr	r2, [pc, #548]	; (8001cc4 <HAL_GPIO_Init+0x280>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d026      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001aa4:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <HAL_GPIO_Init+0x280>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d806      	bhi.n	8001ab8 <HAL_GPIO_Init+0x74>
 8001aaa:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_GPIO_Init+0x284>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d020      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001ab0:	4a86      	ldr	r2, [pc, #536]	; (8001ccc <HAL_GPIO_Init+0x288>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01d      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
          break;
 8001ab6:	e036      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ab8:	4a85      	ldr	r2, [pc, #532]	; (8001cd0 <HAL_GPIO_Init+0x28c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001abe:	4a85      	ldr	r2, [pc, #532]	; (8001cd4 <HAL_GPIO_Init+0x290>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d016      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001ac4:	4a84      	ldr	r2, [pc, #528]	; (8001cd8 <HAL_GPIO_Init+0x294>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
          break;
 8001aca:	e02c      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e028      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e023      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e01e      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	330c      	adds	r3, #12
 8001aee:	623b      	str	r3, [r7, #32]
          break;
 8001af0:	e019      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001afa:	2304      	movs	r3, #4
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e012      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	611a      	str	r2, [r3, #16]
          break;
 8001b12:	e008      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	615a      	str	r2, [r3, #20]
          break;
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2bff      	cmp	r3, #255	; 0xff
 8001b2a:	d801      	bhi.n	8001b30 <HAL_GPIO_Init+0xec>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	e001      	b.n	8001b34 <HAL_GPIO_Init+0xf0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2bff      	cmp	r3, #255	; 0xff
 8001b3a:	d802      	bhi.n	8001b42 <HAL_GPIO_Init+0xfe>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x104>
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	3b08      	subs	r3, #8
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	210f      	movs	r1, #15
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	401a      	ands	r2, r3
 8001b5a:	6a39      	ldr	r1, [r7, #32]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8096 	beq.w	8001ca2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b76:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b8e:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x29c>)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4b      	ldr	r2, [pc, #300]	; (8001ce4 <HAL_GPIO_Init+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x19e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_GPIO_Init+0x2a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x19a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a49      	ldr	r2, [pc, #292]	; (8001cec <HAL_GPIO_Init+0x2a8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x196>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_GPIO_Init+0x2ac>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x192>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001be2:	2300      	movs	r3, #0
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf4:	493a      	ldr	r1, [pc, #232]	; (8001ce0 <HAL_GPIO_Init+0x29c>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0e:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4938      	ldr	r1, [pc, #224]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4933      	ldr	r1, [pc, #204]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	492e      	ldr	r1, [pc, #184]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4924      	ldr	r1, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	491f      	ldr	r1, [pc, #124]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f aed0 	bne.w	8001a58 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	372c      	adds	r7, #44	; 0x2c
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	10110000 	.word	0x10110000
 8001ccc:	10120000 	.word	0x10120000
 8001cd0:	10310000 	.word	0x10310000
 8001cd4:	10320000 	.word	0x10320000
 8001cd8:	10220000 	.word	0x10220000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40011000 	.word	0x40011000
 8001cf0:	40011400 	.word	0x40011400
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e001      	b.n	8001d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]
 8001d32:	4613      	mov	r3, r2
 8001d34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d36:	787b      	ldrb	r3, [r7, #1]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3c:	887a      	ldrh	r2, [r7, #2]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d42:	e003      	b.n	8001d4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	041a      	lsls	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	611a      	str	r2, [r3, #16]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e26c      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8087 	beq.w	8001e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d00c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d84:	4b8f      	ldr	r3, [pc, #572]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d112      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
 8001d90:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d10b      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9e:	4b89      	ldr	r3, [pc, #548]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x12c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d168      	bne.n	8001e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e246      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x76>
 8001dc0:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a7f      	ldr	r2, [pc, #508]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e02e      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a77      	ldr	r2, [pc, #476]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0xbc>
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a71      	ldr	r2, [pc, #452]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001e14:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a67      	ldr	r2, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fcee 	bl	8001814 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fcea 	bl	8001814 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1fa      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe4>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fcda 	bl	8001814 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fcd6 	bl	8001814 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1e6      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x10c>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d063      	beq.n	8001f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e92:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e9e:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d11c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x18c>
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d116      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_RCC_OscConfig+0x176>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e1ba      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4939      	ldr	r1, [pc, #228]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	e03a      	b.n	8001f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x270>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fc8f 	bl	8001814 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fc8b 	bl	8001814 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e19b      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_RCC_OscConfig+0x270>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fc6e 	bl	8001814 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc6a 	bl	8001814 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e17a      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d03a      	beq.n	8001fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d019      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_RCC_OscConfig+0x274>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff fc4e 	bl	8001814 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fc4a 	bl	8001814 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e15a      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f000 faa8 	bl	80024f0 <RCC_Delay>
 8001fa0:	e01c      	b.n	8001fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fc34 	bl	8001814 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fc30 	bl	8001814 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d908      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e140      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	42420000 	.word	0x42420000
 8001fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b9e      	ldr	r3, [pc, #632]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e9      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a6 	beq.w	8002136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b97      	ldr	r3, [pc, #604]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b94      	ldr	r3, [pc, #592]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a93      	ldr	r2, [pc, #588]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b91      	ldr	r3, [pc, #580]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b8e      	ldr	r3, [pc, #568]	; (8002250 <HAL_RCC_OscConfig+0x4f8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <HAL_RCC_OscConfig+0x4f8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a8a      	ldr	r2, [pc, #552]	; (8002250 <HAL_RCC_OscConfig+0x4f8>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7ff fbf1 	bl	8001814 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002036:	f7ff fbed 	bl	8001814 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0fd      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b81      	ldr	r3, [pc, #516]	; (8002250 <HAL_RCC_OscConfig+0x4f8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x312>
 800205c:	4b7b      	ldr	r3, [pc, #492]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a7a      	ldr	r2, [pc, #488]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	e02d      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x334>
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a75      	ldr	r2, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6213      	str	r3, [r2, #32]
 800207e:	4b73      	ldr	r3, [pc, #460]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a72      	ldr	r2, [pc, #456]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	e01c      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_OscConfig+0x356>
 8002094:	4b6d      	ldr	r3, [pc, #436]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a6c      	ldr	r2, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6213      	str	r3, [r2, #32]
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a69      	ldr	r2, [pc, #420]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e00b      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 80020ae:	4b67      	ldr	r3, [pc, #412]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a66      	ldr	r2, [pc, #408]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	4b64      	ldr	r3, [pc, #400]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a63      	ldr	r2, [pc, #396]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d015      	beq.n	80020fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fba1 	bl	8001814 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7ff fb9d 	bl	8001814 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0ab      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	4b57      	ldr	r3, [pc, #348]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ee      	beq.n	80020d6 <HAL_RCC_OscConfig+0x37e>
 80020f8:	e014      	b.n	8002124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fb8b 	bl	8001814 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff fb87 	bl	8001814 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e095      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ee      	bne.n	8002102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b48      	ldr	r3, [pc, #288]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a47      	ldr	r2, [pc, #284]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8081 	beq.w	8002242 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d061      	beq.n	8002210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d146      	bne.n	80021e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002154:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x4fc>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff fb5b 	bl	8001814 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff fb57 	bl	8001814 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e067      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002174:	4b35      	ldr	r3, [pc, #212]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002188:	d108      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	492d      	ldr	r1, [pc, #180]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a19      	ldr	r1, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	430b      	orrs	r3, r1
 80021ae:	4927      	ldr	r1, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x4fc>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff fb2b 	bl	8001814 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff fb27 	bl	8001814 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e037      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46a>
 80021e0:	e02f      	b.n	8002242 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_RCC_OscConfig+0x4fc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fb14 	bl	8001814 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff fb10 	bl	8001814 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e020      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x498>
 800220e:	e018      	b.n	8002242 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e013      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x4f4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	429a      	cmp	r2, r3
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	42420060 	.word	0x42420060

08002258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d0      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d910      	bls.n	800229c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4965      	ldr	r1, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d040      	beq.n	8002378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e073      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4936      	ldr	r1, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7ff fa64 	bl	8001814 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7ff fa60 	bl	8001814 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e053      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d210      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f821 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	fa21 f303 	lsr.w	r3, r1, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1cc>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1d0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f9c2 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	08002d44 	.word	0x08002d44
 8002424:	20000008 	.word	0x20000008
 8002428:	2000000c 	.word	0x2000000c

0800242c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b490      	push	{r4, r7}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002434:	1d3c      	adds	r4, r7, #4
 8002436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d002      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x40>
 8002466:	2b08      	cmp	r3, #8
 8002468:	d003      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x46>
 800246a:	e02d      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800246e:	623b      	str	r3, [r7, #32]
      break;
 8002470:	e02d      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	0c9b      	lsrs	r3, r3, #18
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800247e:	4413      	add	r3, r2
 8002480:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002484:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c5b      	lsrs	r3, r3, #17
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800249e:	4413      	add	r3, r2
 80024a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024aa:	fb02 f203 	mul.w	r2, r2, r3
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
 80024b6:	e004      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	623b      	str	r3, [r7, #32]
      break;
 80024c6:	e002      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ca:	623b      	str	r3, [r7, #32]
      break;
 80024cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc90      	pop	{r4, r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	08002d30 	.word	0x08002d30
 80024e0:	08002d40 	.word	0x08002d40
 80024e4:	40021000 	.word	0x40021000
 80024e8:	007a1200 	.word	0x007a1200
 80024ec:	003d0900 	.word	0x003d0900

080024f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <RCC_Delay+0x34>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <RCC_Delay+0x38>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	0a5b      	lsrs	r3, r3, #9
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800250c:	bf00      	nop
  }
  while (Delay --);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	60fa      	str	r2, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f9      	bne.n	800250c <RCC_Delay+0x1c>
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008
 8002528:	10624dd3 	.word	0x10624dd3

0800252c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e01d      	b.n	800257a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff f854 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f000 fa10 	bl	8002990 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b06      	cmp	r3, #6
 80025aa:	d007      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0202 	mvn.w	r2, #2
 80025f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f9a4 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f997 	bl	8002946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f9a6 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0204 	mvn.w	r2, #4
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f97a 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f96d 	bl	8002946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f97c 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b08      	cmp	r3, #8
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0208 	mvn.w	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f950 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f943 	bl	8002946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f952 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0210 	mvn.w	r2, #16
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2208      	movs	r2, #8
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f926 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f919 	bl	8002946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f928 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0201 	mvn.w	r2, #1
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe feca 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fa51 	bl	8002c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800279c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f8ec 	bl	800297c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0220 	mvn.w	r2, #32
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa1c 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_ConfigClockSource+0x18>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0a6      	b.n	800293e <HAL_TIM_ConfigClockSource+0x166>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d067      	beq.n	80028f8 <HAL_TIM_ConfigClockSource+0x120>
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d80b      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x6c>
 800282c:	2b10      	cmp	r3, #16
 800282e:	d073      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x140>
 8002830:	2b10      	cmp	r3, #16
 8002832:	d802      	bhi.n	800283a <HAL_TIM_ConfigClockSource+0x62>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d06f      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002838:	e078      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800283a:	2b20      	cmp	r3, #32
 800283c:	d06c      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x140>
 800283e:	2b30      	cmp	r3, #48	; 0x30
 8002840:	d06a      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002842:	e073      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002844:	2b70      	cmp	r3, #112	; 0x70
 8002846:	d00d      	beq.n	8002864 <HAL_TIM_ConfigClockSource+0x8c>
 8002848:	2b70      	cmp	r3, #112	; 0x70
 800284a:	d804      	bhi.n	8002856 <HAL_TIM_ConfigClockSource+0x7e>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d033      	beq.n	80028b8 <HAL_TIM_ConfigClockSource+0xe0>
 8002850:	2b60      	cmp	r3, #96	; 0x60
 8002852:	d041      	beq.n	80028d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002854:	e06a      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285a:	d066      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x152>
 800285c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002860:	d017      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002862:	e063      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f000 f965 	bl	8002b42 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002886:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]
      break;
 8002890:	e04c      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f000 f94e 	bl	8002b42 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b4:	609a      	str	r2, [r3, #8]
      break;
 80028b6:	e039      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	461a      	mov	r2, r3
 80028c6:	f000 f8c5 	bl	8002a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2150      	movs	r1, #80	; 0x50
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 f91c 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 80028d6:	e029      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f000 f8e3 	bl	8002ab0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2160      	movs	r1, #96	; 0x60
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f90c 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 80028f6:	e019      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	461a      	mov	r2, r3
 8002906:	f000 f8a5 	bl	8002a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2140      	movs	r1, #64	; 0x40
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f8fc 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 8002916:	e009      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 f8f3 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 8002928:	e000      	b.n	800292c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800292a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
	...

08002990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <TIM_Base_SetConfig+0xbc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <TIM_Base_SetConfig+0xc0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <TIM_Base_SetConfig+0xbc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <TIM_Base_SetConfig+0xc0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d103      	bne.n	8002a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800

08002a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0201 	bic.w	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 030a 	bic.w	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 0210 	bic.w	r2, r3, #16
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ada:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	031b      	lsls	r3, r3, #12
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f043 0307 	orr.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e032      	b.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	2500      	movs	r5, #0
 8002c30:	4e0c      	ldr	r6, [pc, #48]	; (8002c64 <__libc_init_array+0x38>)
 8002c32:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c34:	1ba4      	subs	r4, r4, r6
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	42a5      	cmp	r5, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	f000 f86c 	bl	8002d18 <_init>
 8002c40:	2500      	movs	r5, #0
 8002c42:	4e0a      	ldr	r6, [pc, #40]	; (8002c6c <__libc_init_array+0x40>)
 8002c44:	4c0a      	ldr	r4, [pc, #40]	; (8002c70 <__libc_init_array+0x44>)
 8002c46:	1ba4      	subs	r4, r4, r6
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	42a5      	cmp	r5, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c54:	4798      	blx	r3
 8002c56:	3501      	adds	r5, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c5e:	4798      	blx	r3
 8002c60:	3501      	adds	r5, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08002d54 	.word	0x08002d54
 8002c68:	08002d54 	.word	0x08002d54
 8002c6c:	08002d54 	.word	0x08002d54
 8002c70:	08002d58 	.word	0x08002d58

08002c74 <memset>:
 8002c74:	4603      	mov	r3, r0
 8002c76:	4402      	add	r2, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <modf>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 8002c8a:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 8002c8e:	2e13      	cmp	r6, #19
 8002c90:	4604      	mov	r4, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4694      	mov	ip, r2
 8002c96:	dc21      	bgt.n	8002cdc <modf+0x58>
 8002c98:	2e00      	cmp	r6, #0
 8002c9a:	da07      	bge.n	8002cac <modf+0x28>
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002ca2:	e9cc 0100 	strd	r0, r1, [ip]
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cac:	4f19      	ldr	r7, [pc, #100]	; (8002d14 <modf+0x90>)
 8002cae:	fa47 f606 	asr.w	r6, r7, r6
 8002cb2:	ea01 0706 	and.w	r7, r1, r6
 8002cb6:	ea57 0200 	orrs.w	r2, r7, r0
 8002cba:	d107      	bne.n	8002ccc <modf+0x48>
 8002cbc:	e9cc 0100 	strd	r0, r1, [ip]
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	e7ec      	b.n	8002ca6 <modf+0x22>
 8002ccc:	2200      	movs	r2, #0
 8002cce:	ea21 0306 	bic.w	r3, r1, r6
 8002cd2:	e9cc 2300 	strd	r2, r3, [ip]
 8002cd6:	f7fd fa3f 	bl	8000158 <__aeabi_dsub>
 8002cda:	e7f4      	b.n	8002cc6 <modf+0x42>
 8002cdc:	2e33      	cmp	r6, #51	; 0x33
 8002cde:	dd06      	ble.n	8002cee <modf+0x6a>
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	e9cc 0100 	strd	r0, r1, [ip]
 8002ce6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8002cea:	4614      	mov	r4, r2
 8002cec:	e7db      	b.n	8002ca6 <modf+0x22>
 8002cee:	f2ae 4613 	subw	r6, lr, #1043	; 0x413
 8002cf2:	f04f 3eff 	mov.w	lr, #4294967295
 8002cf6:	fa2e fe06 	lsr.w	lr, lr, r6
 8002cfa:	ea1e 0600 	ands.w	r6, lr, r0
 8002cfe:	d105      	bne.n	8002d0c <modf+0x88>
 8002d00:	e9cc 0100 	strd	r0, r1, [ip]
 8002d04:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8002d08:	4632      	mov	r2, r6
 8002d0a:	e7ee      	b.n	8002cea <modf+0x66>
 8002d0c:	ea20 060e 	bic.w	r6, r0, lr
 8002d10:	4632      	mov	r2, r6
 8002d12:	e7de      	b.n	8002cd2 <modf+0x4e>
 8002d14:	000fffff 	.word	0x000fffff

08002d18 <_init>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr

08002d24 <_fini>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr
